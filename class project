import cv2
import numpy as np
import matplotlib.pyplot as plt


def display_comparison(title, original, processed):
    plt.figure(figsize=(12, 6))
    
    # Original
    plt.subplot(1, 2, 1)
    if len(original.shape) == 2:
        plt.imshow(original, cmap='gray')
    else:
        plt.imshow(cv2.cvtColor(original, cv2.COLOR_BGR2RGB))
    plt.title("Original")
    plt.axis('off')
    
    # Processed
    plt.subplot(1, 2, 2)
    if len(processed.shape) == 2:
        plt.imshow(processed, cmap='gray')
    else:
        plt.imshow(cv2.cvtColor(processed, cv2.COLOR_BGR2RGB))
    plt.title(title)
    plt.axis('off')
    
    plt.show()

# Main interactive program
def interactive_edge_detection(image_path):
    image = cv2.imread(image_path)
    if image is None:
        print("Error: Image not found!")
        return

    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    while True:
        print("\nSelect an option:")
        print("1. Sobel Edge Detection")
        print("2. Canny Edge Detection")
        print("3. Laplacian Edge Detection")
        print("4. Gaussian Smoothing")
        print("5. Median Filtering")
        print("6. Exit")

        choice = input("Enter your choice (1-6): ")

        if choice == "1":
            ksize = int(input("Enter Sobel kernel size (odd number, e.g. 3): "))
            sobelx = cv2.Sobel(gray_image, cv2.CV_64F, 1, 0, ksize=ksize)
            sobely = cv2.Sobel(gray_image, cv2.CV_64F, 0, 1, ksize=ksize)
            sobel_combined = cv2.magnitude(sobelx, sobely)
            sobel_combined = cv2.convertScaleAbs(sobel_combined)
            display_comparison("Sobel Edge Detection", gray_image, sobel_combined)

        elif choice == "2":
            lower_thresh = int(input("Enter lower threshold: "))
            upper_thresh = int(input("Enter upper threshold: "))
            edges = cv2.Canny(gray_image, lower_thresh, upper_thresh)
            display_comparison("Canny Edge Detection", gray_image, edges)

        elif choice == "3":
            laplacian = cv2.Laplacian(gray_image, cv2.CV_64F)
            laplacian_abs = cv2.convertScaleAbs(laplacian)
            display_comparison("Laplacian Edge Detection", gray_image, laplacian_abs)

        elif choice == "4":
            kernel_size = int(input("Enter Gaussian kernel size (odd number): "))
            blurred = cv2.GaussianBlur(image, (kernel_size, kernel_size), 0)
            display_comparison("Gaussian Smoothing", image, blurred)

        elif choice == "5":
            kernel_size = int(input("Enter Median kernel size (odd number): "))
            median_filtered = cv2.medianBlur(image, kernel_size)
            display_comparison("Median Filtering", image, median_filtered)

        elif choice == "6":
            print("Exiting...")
            break

        else:
            print("Invalid input, try again!")

# Example usage
interactive_edge_detection("ðŸ—¿ðŸ—¿ðŸ—¿.png")
